/********************************************************************
 * @File name: niu_data_pri.h
 * @AUthor: Baron.qian
 * @Version: 1.0
 * @Date: 2018-10-21
 * @Description: template trigger check, and template upload 
 * @Copyright: NIU technology
 * @ niu.com
 ********************************************************************/

#ifndef NIU_DATA_PRI_H_
#define NIU_DATA_PRI_H_

#ifdef __cplusplus 
extern "C" {
#endif

#include "niu_types.h"


#define NIU_DISBLE_LOG_OUT
#define NIU_CPACK_ARRAY_TYPE
//#define NIU_CACHE_PDU_TEST

#define __TEST_TEMPLATE_MODE__  (0)

typedef enum  _NIU_ERROR_CODE_
{
   NIU_ERROR_NO_PROF = 100,
   NIU_ERROR_DISCONNECT = 101,
   NIU_ERROR_CONN_FAIL = 102,
}NIU_ERROR_CODE;


typedef enum _NIU_EQP_CFG_
{
   NIU_EQP_FOC_EXSIT= 0x01,
   NIU_EQP_BMS_EXSIT= 0x02,
   NIU_EQP_DB_EXSIT= 0x04,
   NIU_EQP_LCU_EXSIT= 0x08,
   NIU_EQP_WIFI_EXSIT= 0x10,
   NIU_EQP_BT1_EXSIT= 0x20,
   NIU_EQP_BT2_EXSIT=0x40,
   NIU_EQP_GPS_EXSIT = 0x80,
}NIU_EQP_CFG;

typedef enum _NIU_EQP_STATE_
{
   NIU_EQP_FOC_READABLE= 0x01,
   NIU_EQP_BMS_READABLE= 0x02,
   NIU_EQP_DB_READABLE= 0x04,
   NIU_EQP_LCU_READABLE= 0x08,
   NIU_EQP_WIFI_READABLE= 0x10,
   NIU_EQP_BT1_READABLE= 0x20,
   NIU_EQP_BT2_READABLE=0x40,
   NIU_EQP_GPS_ON = 0x80,
}NIU_EQP_STATE;

#define SWP16(num) (num = ((num<<8) & 0xFF00) + ((num>>8) & 0x00FF))
#define SWP32(num) (num = (((num & 0xff000000)>> 24) ) + ((num & 0x00ff0000)>>8) \
               +((num & 0x0000ff00)<<8) +  ((num & 0x000000ff)<< 24) )
#define MAX_TIME (99999)
#define NIU_SMT_PWRKEY      0x01
#define NIU_SMT_WAKEUP      0x02
#define NIU_SMT_GPS         0x04
#define NIU_SMT_GPS_ANT     0x08
#define NIU_SMT_GYRO        0x10
#define NIU_SMT_GYRO_INT    0x20
#define NIU_SMT_USIM        0x40

#define NIU_SMT_ALM_LED         0x01   //双闪报警灯
#define NIU_SMT_ONE_START     0x02   //一键启动键
#define NIU_SMT_OUT_LED         0x04   //外圈灯控
#define NIU_SMT_INNER_LED      0x08  //内圈灯控
#define NIU_SMT_HALL                0x10  //HALL 限速检测
#define NIU_SMT_PULSE              0x20  //相位(轮动)检测
#define NIU_SMT_SPKEY              0x40  //喇叭按键检测
#define NIU_SMT_433                  0x80  //433遥控器
#define NIU_SMT_BT                    0x100  //BT模块检测
#define NIU_SMT_FOC_ACC          0x200 //控制器供电vcc控制
#define NIU_SMT_FOC_DET           0x400 //控制器供电vcc检测
#define NIU_SMT_LOCK_MOTOR    0x800 //锁电机信号

typedef enum _niu_car_type_//车型代码
{
	NIU_NO_CAR_TYPE = 0,
    NIU_U1,
	NIU_U1_Y,
	NIU_UM,
	NIU_N1,
    NIU_N1S,
    NIU_N1SS,
    NIU_N1SP,
    NIU_N1SP_RAL,
    NIU_N1SP_RAL_DB,
    NIU_M1,
    NIU_M1S,
    NIU_M1SS,
    NIU_MP,
	NIU_MP_Y,
	NIU_MPSS,
	NIU_NGT,
	NIU_CARGO,
}NIU_CAR_TYPE;

//中控配置定义
#define NIU_ECU_CONFIG_OTA_HEX_READY	(0x01)
#define NIU_ECU_CONFIG_NO_LOCK_SPEED	(0x02)
#define NIU_ECU_CONFIG_NO_PROF			(0x04)
#define NIU_ECU_CONFIG_LOCK_TRIE_SIZE	(0x08)
#define NIU_ECU_CONFIG_FOTA_DONE		(0x10)
#define NIU_ECU_CONFIG_FOTA_START		(0x20)
#define NIU_ECU_CONFIG_FOTA_LATEST		(0x40)
#define NIU_ECU_CONFIG_FOTAING	(0x80)
#define NIU_ECU_CONFIG_FOTA_ERROR		(0x100)
#define NIU_ECU_CONFIG_GSENSO_ADJUSTED	(0x200)
#define NIU_ECU_CONFIG_LOCK_CAT_TYPE	(0x400)

//中控命令定义
#define NIU_ECU_CMD_RESTORE_SETTING	(0x01)
#define NIU_ECU_CMD_FOTA			(0x02)

/////////BMS状态
//add new define by Baron-20181025
#define BMS_BAT_EMPTY       (0x0000)    //空载
//end add
#define	BMS_REG_DISCHARGE	(0x0001)	//放电
#define	BMS_REG_INCHARGE	(0x0002)	//充电
#define	BMS_INCHARGE_PTK	(0x0004)	//过充保护警告
#define	BMS_BAT_LOW	(0x0008)	//过放保护警告
#define	BMS_INCHARGE_OVER_CUR	(0x0010)	//充电过流保护警告
#define	BMS_DISCHARGE_OVER_CUR	(0x0020)	//放电过流保护警告
#define	BMS_BAT_TEMP_HIGH	(0x0040)	//电池过热保护警告
#define	BMS_BAT_TEMP_LOW	(0x0080)	//电池过冷保护
#define	BMS_BAR_OTHER_ERR	(0x0100)	//电池其他异常警告（电池组开路/电池组压差大于 0.3V）
#define	BMS_BAR_DUANLU	(0x0200)	//电池短路保护警告
#define	BMS_BAR_WATER	(0x0400)	//电池包进水
#define	BMS_BAR_MOS_ERR	(0x0800)	//BMS MOS 管损坏

#define	DRIVER_MOS_ERR	(0x0001)	//功率管故障
#define	DRIVER_OVERCUR	(0x0002)	//过流
#define	DRIVER_PHASE_ERR	(0x0004)	//缺相
#define	DRIVER_HALL_ERR	(0x0008)	//HALL故障
#define	DRIVER_STALL	(0x0010)	//堵转
#define	DRIVER_POWER_ERR	(0x0020)	//驱动电源故障
#define	DRIVER_OVERVOT	(0x0040)	//过压
#define	DRIVER_LOWVOT	(0x0080)	//欠压
#define	DRIVER_OVERTEMP	(0x0100)	//控制器过温
#define	DRIVER_HANDLE_ERR	(0x0200)	//转把故障
#define	DRIVER_XUNHANG	(0x0400)	//巡航状态
#define	DRIVER_SWITCH_OK	(0x0800)	//边撑开关有效
#define	DRIVER_EBS_STATE	(0x1000)	//EBS状态
#define	DRIVER_BREAK_POWER	(0x2000)	//刹车断电状态
#define	DRIVER_LOCK_CAR	(0x4000)	//锁车状态
#define	DRIVER_LOCK_SPEED	(0x8000)	//速度锁定状态

#define	NIU_TRIGGER_EVENT_MASK                  (0x3FF)
#define NIU_TRIGGER_STATE_MASK               (0xFFFFFFFF)  
//ecu_state 中定义
#define NIU_TRIGGER_EVENT_ACC_ON                (0x00000001)		//电门开触发
#define NIU_TRIGGER_EVENT_ACC_OFF               (0x00000002)		//电门关触发
#define NIU_TRIGGER_EVENT_BATTER_IN             (0x00000004)		//外电接入触发
#define NIU_TRIGGER_EVENT_BATTER_OUT            (0x00000008)		//外电断开触发
#define NIU_TRIGGER_EVENT_SHAKE                 (0x00000010)		//震动触发
#define NIU_TRIGGER_EVENT_SHAKE_STOP            (0x00000020)		//震动停止触发
#define NIU_TRIGGER_EVENT_MOVE                  (0x00000040)		//异动触发
#define NIU_TRIGGER_EVENT_MOVE_STOP             (0x00000080)		//异动恢复触发
#define NIU_TRIGGER_EVENT_FALL                  (0x00000100)		//倾倒触发
#define NIU_TRIGGER_EVENT_FALL_STOP             (0x00000200)		//倾倒恢复触发
#define NIU_TRIGGER_STATE_RUNNING_Y             (0x00000400)        //行驶状态
#define NIU_TRIGGER_STATE_RUNNING_N             (0x00000800)        //非行驶状态
#define NIU_TRIGGER_STATE_ACC_Y                 (0x00001000)        //电门开状态
#define NIU_TRIGGER_STATE_ACC_N                 (0x00002000)        //电门关状态
#define NIU_TRIGGER_STATE_BATTERY_Y             (0x00004000)        //外电接入状态
#define NIU_TRIGGER_STATE_BATTERY_N             (0x00008000)        //外电断开状态
#define NIU_TRIGGER_STATE_SLAVE_Y               (0x00010000)        //SLAVE_COM_PC
#define NIU_TRIGGER_STATE_SLAVE_N               (0x00020000)        //SLAVE_COM_PC
#define NIU_TRIGGER_STATE_SHAKE_Y               (0x00040000)        //震动状态
#define NIU_TRIGGER_STATE_SHAKE_N               (0x00080000)        //非震动状态
#define NIU_TRIGGER_STATE_MOVE_Y                (0x00100000)        //异动状态
#define NIU_TRIGGER_STATE_MOVE_N                (0x00200000)        //非异动状态
#define NIU_TRIGGER_STATE_FALL_Y                (0x00400000)        //倾倒状态
#define NIU_TRIGGER_STATE_FALL_N                (0x00800000)        //非倾倒状态
#define NIU_TRIGGER_STATE_INCHARGE              (0x01000000)        //车辆充电状态
#define NIU_TRIGGER_STATE_DISCHARGE             (0x02000000)        //车辆非充电状态
#define NIU_TRIGGER_STATE_GPS_Y                 (0x04000000)        //GPS定位成功
#define NIU_TRIGGER_STATE_GPS_N                 (0x08000000)        //GPS定位失败
#define NIU_TRIGGER_STATE_FOC_DISCONNECT        (0x10000000)        //FOC通讯故障
#define NIU_TRIGGER_STATE_BMS_DISCONNECT        (0x20000000)        //BMS通讯故障
#define NIU_TRIGGER_STATE_DB_DISCONNECT         (0x40000000)        //DB通讯故障
#define NIU_TRIGGER_STATE_LCU_DISCONNECT        (0x80000000)        //LCU通讯故障


//ecu_state2 中定义
#define NIU_TRIGGER_EVENT_MOVE_GSENSOR          (0x00000001)        //移动触发
#define NIU_TRIGGER_EVENT_MOVE_GSENSOR_STOP     (0x00000002)        //移动停止触发
#define NIU_TRIGGER_STATE_MOVE_GSENSOR_Y        (0x00000400)        //被移动状态
#define NIU_TRIGGER_STATE_MOVE_GSENSOR_N        (0x00000800)        //非被移动状态
#define NIU_TRIGGER_STATE_BMS2_DISCONNECT       (0x00001000)        //BMS2未连接
#define NIU_TRIGGER_STATE_BCS_DISCONNECT        (0x00002000)        //BCS未连接







#define NIU_TRIGGER_EVENT_RENT_DATA_UPDATA      (0x00000004)



#if 0
#define NIU_TRIGGER_ALARM_90     (0x01) //遥控锁车状态下 振动报警
#define NIU_TRIGGER_ALARM_30     (0x02) //报警器未锁 
#define NIU_TRIGGER_ALARM_50     (0x04) //电门关闭时 报警器寻车
#define NIU_TRIGGER_ALARM_70     (0x08) //遥控锁车状态下 电门非法打开报警
#define NIU_TRIGGER_ALARM_10     (0x10) //电门关闭时 报警器已锁
#else

#define NIU_TRIGGER_ALARM_ALERT                 (0x01)              // 振动报警状态
#define NIU_TRIGGER_ALARM_LOCK                  (0x02)              // 报警器锁状态
#define NIU_TRIGGER_ALARM_FIND                  (0x04)              // 寻车状态
#define NIU_TRIGGER_ALARM_ACC                   (0x08)              //电门非法打开报警状态
#define NIU_TRIGGER_ALARM_AUTO_LOCK             (0x10)              //自动设防
#define NIU_TRIGGER_ALARM_EVENT_CHANGE          (0x20)              //控制器状态变化
#endif

//FOR Trigger7
#define NIU_TRIGGER_OTA_READY                   (0x01)              //OTA Ready
#define NIU_TRIGGER_FOTA_READY                  (0x02)              //FOTA Ready
#define NIU_TRIGGER_BATTERY_IN                  (0x04)
#define NIU_TRIGGER_FOTA_WORKING                (0x08)


typedef enum  _niu_eye_settings_
{
   NIU_EYE_SETTINGS_ACC = 0x01,
   NIU_EYE_SETTINGS_LOCK_ENGINE = 0x02,
   NIU_EYE_SETTINGS_AUTOLOCK = 0x04,
}NIU_EYE_SETTINGS;

typedef enum _niu_car_state_
{
    NIU_STATE_ACC = 0x01,
    NIU_STATE_RUNNING = 0x02,
    NIU_STATE_BATTERY = 0x04,
    NIU_STATE_SLAVE = 0x08,
    NIU_STATE_SHAKE = 0x10,
    NIU_STATE_MOVE = 0x20,
    NIU_STATE_FALL = 0x40,
    NIU_STATE_INCHARGE = 0x80,
    NIU_STATE_GPS_LOCATION = 0x100,
    NIU_STATE_GPS_ON = 0x200,
    NIU_STATE_FOC_ERR = 0x400,
    NIU_STATE_BMS_ERR = 0x800,
    NIU_STATE_DB_ERR = 0x1000,
    NIU_STATE_LCU_ERR = 0x2000,
    NIU_STATE_FOTA = 0x4000,
    NIU_STATE_MOVE_EX = 0x8000,
    NIU_STATE_BMS2_ERR = 0x10000,
    NIU_STATE_BCS_ERR = 0x20000,
    NIU_STATE_DUL_BATTERY = 0x40000,
    NIU_STATE_MQTT_CONNECTED = 0x80000,
    NIU_STATE_C35_CONNECTED = 0x100000
} NIU_CAR_STATE;

typedef enum  _niu_alarm_state_
{
	NIU_ALARM_STATE_ACC_ON = 0x01,
	NIU_ALARM_STATE_ACC_OFF = 0x02,
	NIU_ALARM_STATE_SECURITY_ON = 0x04,	
	NIU_ALARM_STATE_SECURITY_OFF = 0x08,
	NIU_ALARM_STATE_LOCATING = 0x10,
	NIU_ALARM_STATE_ALARMING = 0x20,
}NIU_ALARM_STATE;

typedef enum _niu_alarm_state_ex
{
	NIU_ALARM_STATE_NO = 0,
	NIU_ALARM_STATE_START = 1,
	NIU_ALARM_STATE_ING =2,
	NIU_ALARM_STATE_END = 3,
}NIU_ALARM_STATE_EX;

typedef enum _niu_data_type
{
    NIU_INT8 = 0,
    NIU_UINT8,
    NIU_INT16,
    NIU_UINT16,
    NIU_INT32,
    NIU_UINT32,
    NIU_STRING,
    NIU_ARRAY,
    NIU_FLOAT,
    NIU_DOUBLE,
}NIU_DATA_TYPE;

//value update mask
#define NIU_MASK_ECU_CAR_STA_STM32      (NIU_STATE_ACC | NIU_STATE_RUNNING | NIU_STATE_BATTERY | NIU_STATE_SLAVE \
                                        | NIU_STATE_INCHARGE | NIU_STATE_FOC_ERR | NIU_STATE_BMS_ERR | NIU_STATE_DB_ERR \
                                        | NIU_STATE_LCU_ERR | NIU_STATE_BMS2_ERR | NIU_STATE_BCS_ERR | NIU_STATE_DUL_BATTERY \
                                        | NIU_STATE_SHAKE | NIU_STATE_FALL | NIU_STATE_MOVE_EX)
#define NIU_MASK_ECU_CAR_STA_EC25       ( NIU_STATE_MOVE | NIU_STATE_GPS_LOCATION | NIU_STATE_GPS_ON \
                                         | NIU_STATE_FOTA  | NIU_STATE_MQTT_CONNECTED | NIU_STATE_C35_CONNECTED)

#define NIU_MASK_ECU_CAR_EQP_CFG_STM32  (NIU_EQP_FOC_EXSIT | NIU_EQP_BMS_EXSIT | NIU_EQP_DB_EXSIT  | NIU_EQP_LCU_EXSIT \
                                        | NIU_EQP_BT1_EXSIT | NIU_EQP_BT2_EXSIT)
#define NIU_MASK_ECU_CAR_EQP_CFG_EC25   (NIU_EQP_WIFI_EXSIT | NIU_EQP_GPS_EXSIT)

#define NIU_MASK_ECU_CAR_EQP_STATE_STM32 (NIU_EQP_FOC_READABLE | NIU_EQP_BMS_READABLE | NIU_EQP_DB_READABLE | NIU_EQP_LCU_READABLE \
                                        | NIU_EQP_BT1_READABLE |  NIU_EQP_BT2_READABLE)
#define NIU_MASK_ECU_CAR_EQP_STATE_EC25  (NIU_EQP_WIFI_READABLE | NIU_EQP_GPS_ON)



typedef struct _niu_data_value
{
    JVOID *addr;
    NIU_DATA_TYPE type; //cwpack_item_types 或者用msgpack规定的类型
    NINT16 len;
}NIU_DATA_VALUE;


typedef enum _niu_device_type_
{
    NIU_KEEP = 0x00,
    NIU_DB = 0x10,          //仪表
    NIU_FOC = 0x20,         //驱动器
    NIU_BMS = 0x31,         //电池
    NIU_BMS2 = 0x32,        //电池２
    NIU_QC = 0x35,          //充电器
    NIU_ECU = 0x40,         //中控
    NIU_EMCU = 0x41,         //整车控制器
    NIU_CPM = 0x42,         //码表
    NIU_ALARM = 0x50,       //报警
    NIU_LCU = 0x70,         //灯光控制器
    NIU_LOCKBOARD = 0xA0,   //锁控板
    NIU_BCS = 0xB0,         //双切
    NIU_DEFAULT = 0xFE,
    NIU_ALL  =0xff,
}NIU_DEVICE_TYPE;

typedef NIU_DEVICE_TYPE NIU_DATA_ADDR_BASE;
typedef enum _niu_data_id_ecu_
{
    NIU_ID_ECU_SERVER_URL,
    NIU_ID_ECU_SERVER_PORT,
    NIU_ID_ECU_ECU_SERIAL_NUMBER,
    NIU_ID_ECU_ECU_SOFT_VER,
    NIU_ID_ECU_ECU_HARD_VER,
    NIU_ID_ECU_IMEI,
    NIU_ID_ECU_ICCID,
    NIU_ID_ECU_IMSI,
    NIU_ID_ECU_EID,
    NIU_ID_ECU_MOVED_LENGTH,
    NIU_ID_ECU_DEALER_CODE,
    NIU_ID_ECU_UTC,
    NIU_ID_ECU_CAR_TYPE,
    NIU_ID_ECU_CAR_SPEED_INDEX,
    NIU_ID_ECU_TIZE_SIZE,
    NIU_ID_ECU_SPEED_LOC_SOC,
    NIU_ID_ECU_LOST_ENERY,
    NIU_ID_ECU_LOST_SOC,
    NIU_ID_ECU_LAST_MILEAGE,
    NIU_ID_ECU_TOTAL_MILEAGE,
    NIU_ID_ECU_CHARGE_VALUE,
    NIU_ID_ECU_DISCHARGE_VALUE,
    NIU_ID_ECU_SHAKING_VALUE,
    NIU_ID_ECU_ECU_CFG,
    NIU_ID_ECU_ECU_CMD,
    NIU_ID_ECU_BMS_CMD,
    NIU_ID_ECU_FOC_CMD,
    NIU_ID_ECU_DB_CMD,
    NIU_ID_ECU_LCU_CMD,
    NIU_ID_ECU_ALARM_CMD,
    NIU_ID_ECU_DISPLAY_RANDOM_CODE,
    NIU_ID_ECU_UPLOADING_TEMPLATE_1,
    NIU_ID_ECU_UPLOADING_TEMPLATE_2,
    NIU_ID_ECU_UPLOADING_TEMPLATE_3,
    NIU_ID_ECU_UPLOADING_TEMPLATE_4,
    NIU_ID_ECU_UPLOADING_TEMPLATE_5,
    NIU_ID_ECU_UPLOADING_TEMPLATE_6,
    NIU_ID_ECU_UPLOADING_TEMPLATE_7,
    NIU_ID_ECU_UPLOADING_TEMPLATE_8,
    NIU_ID_ECU_UPLOADING_TEMPLATE_9,
    NIU_ID_ECU_UPLOADING_TEMPLATE_10,
    NIU_ID_ECU_UPLOADING_TEMPLATE_11,
    NIU_ID_ECU_UPLOADING_TEMPLATE_12,
    NIU_ID_ECU_UPLOADING_TEMPLATE_13,
    NIU_ID_ECU_UPLOADING_TEMPLATE_14,
    NIU_ID_ECU_UPLOADING_TEMPLATE_15,
    NIU_ID_ECU_UPLOADING_TEMPLATE_16,
    NIU_ID_ECU_UPLOADING_TEMPLATE_17,
    NIU_ID_ECU_UPLOADING_TEMPLATE_18,
    NIU_ID_ECU_UPLOADING_TEMPLATE_19,
    NIU_ID_ECU_UPLOADING_TEMPLATE_20,
    NIU_ID_ECU_LONGITUDE,
    NIU_ID_ECU_LATITUDE,
    NIU_ID_ECU_HDOP,
    NIU_ID_ECU_PHOP,
    NIU_ID_ECU_HEADING,
    NIU_ID_ECU_GPS_SPEED,
    NIU_ID_ECU_ECU_BATTARY,
    NIU_ID_ECU_NOW_BTS,
    NIU_ID_ECU_NEAR_BTS1,
    NIU_ID_ECU_NEAR_BTS2,
    NIU_ID_ECU_NEAR_BTS3,
    NIU_ID_ECU_NEAR_BTS4,
    NIU_ID_ECU_AP_IP,
    NIU_ID_ECU_CAR_NO_GPS_SIGNAL_TIME,
    NIU_ID_ECU_CAR_NO_GSM_SIGNAL_TIME,
    NIU_ID_ECU_CAR_SLEEP_TIME,
    NIU_ID_ECU_X_ACC,
    NIU_ID_ECU_Y_ACC,
    NIU_ID_ECU_Z_ACC,
    NIU_ID_ECU_X_ANG,
    NIU_ID_ECU_Y_ANG,
    NIU_ID_ECU_Z_ANG,
    NIU_ID_ECU_X_MAG,
    NIU_ID_ECU_Y_MAG,
    NIU_ID_ECU_Z_MAG,
    NIU_ID_ECU_AIR_PRESSURE,
    NIU_ID_ECU_ECU_STATE,
    NIU_ID_ECU_CAR_STA,
    NIU_ID_ECU_TIMESTAMP,
    NIU_ID_ECU_GPS_SINGAL,
    NIU_ID_ECU_CSQ,
    NIU_ID_ECU_CAR_RUNNING_TIME,
    NIU_ID_ECU_CAR_STOPING_TIME,
    NIU_ID_ECU_OTA_EXEC_EQP,
    NIU_ID_ECU_OTA_RATE,
    NIU_ID_ECU_OTA_BIN_URL,
    NIU_ID_ECU_OTA_SOFT_VER,
    NIU_ID_ECU_OTA_HARD_VER,
    NIU_ID_ECU_OTA_PACK_SIZE,
    NIU_ID_ECU_OTA_PACK_NUM,
    NIU_ID_ECU_OTA_EQP,
    NIU_ID_ECU_STOP_LONGITUDE,
    NIU_ID_ECU_STOP_LATITUDE,
    NIU_ID_ECU_DB_CODE_DIS_TIME,
    NIU_ID_ECU_CELL_MCC,
    NIU_ID_ECU_CELL_MNC,
    NIU_ID_ECU_CELL_LAC_1,
    NIU_ID_ECU_CELL_CID_1,
    NIU_ID_ECU_CELL_RSSI_1,
    NIU_ID_ECU_CELL_LAC_2,
    NIU_ID_ECU_CELL_CID_2,
    NIU_ID_ECU_CELL_RSSI_2,
    NIU_ID_ECU_CELL_LAC_3,
    NIU_ID_ECU_CELL_CID_3,
    NIU_ID_ECU_CELL_RSSI_3,
    NIU_ID_ECU_CELL_LAC_4,
    NIU_ID_ECU_CELL_CID_4,
    NIU_ID_ECU_CELL_RSSI_4,
    NIU_ID_ECU_CELL_LAC_5,
    NIU_ID_ECU_CELL_CID_5,
    NIU_ID_ECU_CELL_RSSI_5,
    NIU_ID_ECU_POLE_PAIRS,
    NIU_ID_ECU_RADIUS,
    NIU_ID_ECU_CALU_SPEED_INDEX,
    NIU_ID_ECU_WIFI1_BSSID_1,
    NIU_ID_ECU_WIFI1_BSSID_2,
    NIU_ID_ECU_WIFI1_BSSID_3,
    NIU_ID_ECU_WIFI1_BSSID_4,
    NIU_ID_ECU_WIFI1_BSSID_5,
    NIU_ID_ECU_WIFI1_BSSID_6,
    NIU_ID_ECU_WIFI1_RSSI,
    NIU_ID_ECU_WIFI2_BSSID_1,
    NIU_ID_ECU_WIFI2_BSSID_2,
    NIU_ID_ECU_WIFI2_BSSID_3,
    NIU_ID_ECU_WIFI2_BSSID_4,
    NIU_ID_ECU_WIFI2_BSSID_5,
    NIU_ID_ECU_WIFI2_BSSID_6,
    NIU_ID_ECU_WIFI2_RSSI,
    NIU_ID_ECU_WIFI3_BSSID_1,
    NIU_ID_ECU_WIFI3_BSSID_2,
    NIU_ID_ECU_WIFI3_BSSID_3,
    NIU_ID_ECU_WIFI3_BSSID_4,
    NIU_ID_ECU_WIFI3_BSSID_5,
    NIU_ID_ECU_WIFI3_BSSID_6,
    NIU_ID_ECU_WIFI3_RSSI,
    NIU_ID_ECU_WIFI4_BSSID_1,
    NIU_ID_ECU_WIFI4_BSSID_2,
    NIU_ID_ECU_WIFI4_BSSID_3,
    NIU_ID_ECU_WIFI4_BSSID_4,
    NIU_ID_ECU_WIFI4_BSSID_5,
    NIU_ID_ECU_WIFI4_BSSID_6,
    NIU_ID_ECU_WIFI4_RSSI,
    NIU_ID_ECU_WIFI5_BSSID_1,
    NIU_ID_ECU_WIFI5_BSSID_2,
    NIU_ID_ECU_WIFI5_BSSID_3,
    NIU_ID_ECU_WIFI5_BSSID_4,
    NIU_ID_ECU_WIFI5_BSSID_5,
    NIU_ID_ECU_WIFI5_BSSID_6,
    NIU_ID_ECU_WIFI5_RSSI,
    NIU_ID_ECU_SMT_TEST,
    NIU_ID_ECU_APP_CONTROL,
    NIU_ID_ECU_FOTA_DOWNLOAD_PERCENT,
    NIU_ID_ECU_CAR_EQP_CFG,
    NIU_ID_ECU_CAR_EQP_STATE,
    NIU_ID_ECU_FAIL_VALUE,
    NIU_ID_ECU_FALL_PITCH,
    NIU_ID_ECU_FALL_ROLL,
    NIU_ID_ECU_ECU_STATE2,
    NIU_ID_ECU_ECU_ADUPS_VER,
    NIU_ID_ECU_MOVE_GSENSOR_COUNT,
    NIU_ID_ECU_MOVE_GSENSOR_TIME,
    NIU_ID_ECU_PDU_MESSAGE_CURRENT_NUMBER,
    NIU_ID_ECU_MAX_SNR_1,
    NIU_ID_ECU_MAX_SNR_2,
    NIU_ID_ECU_EYE_SETTINGS,
    NIU_ID_ECU_4G_IMEI,
    NIU_ID_ECU_4G_TEMPERATURE,
    NIU_ID_ECU_ECU_VELOCITY,
    NIU_ID_ECU_BLE_MAC,
    NIU_ID_ECU_BLE_PASSWORD,
    NIU_ID_ECU_BLE_AES,
    NIU_ID_ECU_BLE_NAME,
    NIU_ID_ECU_SMT_TEST2,
    NIU_ID_ECU_LIMITING_VELOCITY_MAX,
    NIU_ID_ECU_LIMITING_VELOCITY_MIN,
    NIU_ID_ECU_FRONT_TIRE_SIZE,
    NIU_ID_ECU_SERVER_URL2,
    NIU_ID_ECU_SERVER_PORT2,
    NIU_ID_ECU_SERVER_ERROR_URL,
    NIU_ID_ECU_SERVER_ERROR_PORT,
    NIU_ID_ECU_SERVER_ERROR_URL2,
    NIU_ID_ECU_SERVER_ERROR_PORT2,
    NIU_ID_ECU_SERVER_LBS_URL,
    NIU_ID_ECU_SERVER_LBS_PORT,
    NIU_ID_ECU_SERVER_LBS_URL2,
    NIU_ID_ECU_SERVER_LBS_PORT2,
    NIU_ID_ECU_V35_ALARM_STATE,
    NIU_ID_ECU_ECU_KEEPALIVE,
    NIU_ID_ECU_ECU_GPS_MAX_CNR,
    NIU_ID_ECU_ECU_GPS_MIN_CNR,
    NIU_ID_ECU_ECU_GPS_AVG_CNR,
    NIU_ID_ECU_ECU_GPS_SEILL_NUM,
    NIU_ID_ECU_ECU_NO_CDMA_LOCATION,
    NIU_ID_ECU_ECU_CDMA_LOCATION,
    NIU_ID_ECU_ECU_GPS_SLEEP_TIME,
    NIU_ID_ECU_ECU_GPS_AWAKE_TIME,
    NIU_ID_ECU_ECU_AVG_LONGITUDE,
    NIU_ID_ECU_ECU_AVG_LATITUDE,
    NIU_ID_ECU_ECU_V35_CONFIG,
    NIU_ID_ECU_ECU_PITCH,
    NIU_ID_ECU_ECU_ROLL,
    NIU_ID_ECU_ECU_YAW,
    NIU_ID_ECU_ECU_SERVER_ERROR_CODE,
    NIU_ID_ECU_ECU_SERVER_ERROR_CODE_TIME,
    NIU_ID_ECU_ECU_SERVER_CONNECTED_TIME,
    NIU_ID_ECU_ECU_SERVER_KA_TIMEOUT_TIME,
    NIU_ID_ECU_ECU_SERVER_RESET_4G_TIME,
    NIU_ID_ECU_ECU_SERVER_DO_CONNECT_COUNT,
    NIU_ID_ECU_ECU_SERVER_RESET_4G_COUNT,
    NIU_ID_ECU_ECU_REALTIME_LONGITUDE,
    NIU_ID_ECU_ECU_REALTIME_LATITUDE,
    NIU_ID_ECU_APP_CONTORL,
    NIU_ID_ECU_APP_CONTORL2,
    NIU_ID_ECU_APP_CONTORL3,
    NIU_ID_ECU_APP_CONTORL10,
    NIU_ID_ECU_APP_CONTORL11,
    NIU_ID_ECU_APP_CONTORL12,
    NIU_ID_ECU_CMD_ID,
    NIU_ID_ECU_CMD_RESULT,
    NIU_ID_ECU_CMD_EXPIRY_TIMESTAMP,
    NIU_ID_ECU_CMD_RECEIVE_TIMESTAMP,
    NIU_ID_ECU_CMD_EXEC_TIMESTAMP,
    NIU_ID_ECU_AUTO_CLOSE_TIME,
    NIU_ID_ECU_EX_MODEL_VERSION,
    NIU_ID_ECU_ECU_GPS_VERSION,
    NIU_ID_ECU_UPLOADING_TEMPLATE_21,
    NIU_ID_ECU_UPLOADING_TEMPLATE_22,
    NIU_ID_ECU_UPLOADING_TEMPLATE_23,
    NIU_ID_ECU_UPLOADING_TEMPLATE_24,
    NIU_ID_ECU_UPLOADING_TEMPLATE_25,
    NIU_ID_ECU_UPLOADING_TEMPLATE_26,
    NIU_ID_ECU_UPLOADING_TEMPLATE_27,
    NIU_ID_ECU_UPLOADING_TEMPLATE_28,
    NIU_ID_ECU_UPLOADING_TEMPLATE_29,
    NIU_ID_ECU_UPLOADING_TEMPLATE_30,
    NIU_ID_ECU_UPLOADING_TEMPLATE_31,
    NIU_ID_ECU_UPLOADING_TEMPLATE_32,
    NIU_ID_ECU_UPLOADING_TEMPLATE_33,
    NIU_ID_ECU_UPLOADING_TEMPLATE_34,
    NIU_ID_ECU_UPLOADING_TEMPLATE_35,
    NIU_ID_ECU_UPLOADING_TEMPLATE_36,
    NIU_ID_ECU_UPLOADING_TEMPLATE_37,
    NIU_ID_ECU_UPLOADING_TEMPLATE_38,
    NIU_ID_ECU_UPLOADING_TEMPLATE_39,
    NIU_ID_ECU_UPLOADING_TEMPLATE_40,
    NIU_ID_ECU_UPLOADING_TEMPLATE_41,
    NIU_ID_ECU_UPLOADING_TEMPLATE_42,
    NIU_ID_ECU_UPLOADING_TEMPLATE_43,
    NIU_ID_ECU_UPLOADING_TEMPLATE_44,
    NIU_ID_ECU_UPLOADING_TEMPLATE_45,
    NIU_ID_ECU_UPLOADING_TEMPLATE_46,
    NIU_ID_ECU_UPLOADING_TEMPLATE_47,
    NIU_ID_ECU_UPLOADING_TEMPLATE_48,
    NIU_ID_ECU_UPLOADING_TEMPLATE_49,
    NIU_ID_ECU_UPLOADING_TEMPLATE_50,
    NIU_ID_ECU_INHERIT_MILEAGE,
    NIU_ID_ECU_REBOOT_COUNT,
    NIU_ID_ECU_SERVERUSERNAME,
    NIU_ID_ECU_SERVERPASSWORD,
    NIU_ID_ECU_AESKEY,
    NIU_ID_ECU_MQTTSUBSCRIBE,
    NIU_ID_ECU_MQTTPUBLISH,
    NIU_ID_ECU_MAX
} NIU_DATA_ID_ECU;


typedef enum _niu_data_id_emcu_
{
     NIU_ID_EMCU_EMCU_SOFT_VER,
     NIU_ID_EMCU_EMCU_HARD_VER,
     NIU_ID_EMCU_EMCU_SN,
     NIU_ID_EMCU_EMCU_COMPILETIME,
     NIU_ID_EMCU_CMD,
     NIU_ID_EMCU_ALARMKEYID,
     NIU_ID_EMCU_SMT_TEST,
     NIU_ID_EMCU_REMOTE_GROUP_CODE,
     NIU_ID_EMCU_MAX
}NIU_DATA_ID_EMCU;


typedef enum _niu_data_id_bms_
{
     NIU_ID_BMS_BMS_USER,
     NIU_ID_BMS_BMS_BMS_ID,
     NIU_ID_BMS_BMS_S_VER,
     NIU_ID_BMS_BMS_H_VER,
     NIU_ID_BMS_BMS_P_PWRD,
     NIU_ID_BMS_BMS_BAT_TYPE,
     NIU_ID_BMS_BMS_SN_ID,
     NIU_ID_BMS_BMS_OC_VLT_P,
     NIU_ID_BMS_BMS_ROC_VLT,
     NIU_ID_BMS_BMS_DC_VLT_P,
     NIU_ID_BMS_BMS_RDC_VLT_P,
     NIU_ID_BMS_BMS_C_B_VLT,
     NIU_ID_BMS_BMS_C_CUR_P,
     NIU_ID_BMS_BMS_DC_CUR_P,
     NIU_ID_BMS_BMS_ISC_P,
     NIU_ID_BMS_BMS_DCOTP_P,
     NIU_ID_BMS_BMS_RDCOTP_P,
     NIU_ID_BMS_BMS_COTP_P,
     NIU_ID_BMS_BMS_RCOTP_P,
     NIU_ID_BMS_BMS_DCLTP_P,
     NIU_ID_BMS_BMS_RDCLTP_P,
     NIU_ID_BMS_BMS_NCOM_DC_EN,
     NIU_ID_BMS_BMS_RATED_VLT,
     NIU_ID_BMS_BMS_BAT_TO_CAP,
     NIU_ID_BMS_BMS_C_CONT,
     NIU_ID_BMS_BMS_TO_VLT_RT,
     NIU_ID_BMS_BMS_C_CUR_RT,
     NIU_ID_BMS_BMS_DC_CUR_RT,
     NIU_ID_BMS_BMS_SOC_RT,
     NIU_ID_BMS_BMS_BAT_STA_RT,
     NIU_ID_BMS_BMS_DC_FL_T_RT,
     NIU_ID_BMS_BMS_TP1_RT,
     NIU_ID_BMS_BMS_TP2_RT,
     NIU_ID_BMS_BMS_TP3_RT,
     NIU_ID_BMS_BMS_TP4_RT,
     NIU_ID_BMS_BMS_TP5_RT,
     NIU_ID_BMS_BMS_G_VLT_RT1,
     NIU_ID_BMS_BMS_G_VLT_RT2,
     NIU_ID_BMS_BMS_G_VLT_RT3,
     NIU_ID_BMS_BMS_G_VLT_RT4,
     NIU_ID_BMS_BMS_G_VLT_RT5,
     NIU_ID_BMS_BMS_G_VLT_RT6,
     NIU_ID_BMS_BMS_G_VLT_RT7,
     NIU_ID_BMS_BMS_G_VLT_RT8,
     NIU_ID_BMS_BMS_G_VLT_RT9,
     NIU_ID_BMS_BMS_G_VLT_RT10,
     NIU_ID_BMS_BMS_G_VLT_RT11,
     NIU_ID_BMS_BMS_G_VLT_RT12,
     NIU_ID_BMS_BMS_G_VLT_RT13,
     NIU_ID_BMS_BMS_G_VLT_RT14,
     NIU_ID_BMS_BMS_G_VLT_RT15,
     NIU_ID_BMS_BMS_G_VLT_RT16,
     NIU_ID_BMS_BMS_G_VLT_RT17,
     NIU_ID_BMS_BMS_G_VLT_RT18,
     NIU_ID_BMS_BMS_G_VLT_RT19,
     NIU_ID_BMS_BMS_G_VLT_RT20,
     NIU_ID_BMS_MAX
}NIU_DATA_ID_BMS;


typedef enum _niu_data_id_lcu_
{
     NIU_ID_LCU_LCU_SOFT_VER,
     NIU_ID_LCU_LCU_HARD_VER,
     NIU_ID_LCU_LCU_SN,
     NIU_ID_LCU_LCU_STATE,
     NIU_ID_LCU_LCU_SWITCH_STATE,
     NIU_ID_LCU_LCU_LIGHT_STATE,
     NIU_ID_LCU_LCU_X_ACC,
     NIU_ID_LCU_LCU_Y_ACC,
     NIU_ID_LCU_LCU_Z_ACC,
     NIU_ID_LCU_LCU_X_ANG,
     NIU_ID_LCU_LCU_Y_ANG,
     NIU_ID_LCU_LCU_Z_ANG,
     NIU_ID_LCU_LCU_CAR_STATE,
     NIU_ID_LCU_MAX
}NIU_DATA_ID_LCU;


typedef enum _niu_data_id_db_
{
     NIU_ID_DB_DB_STATUS,
     NIU_ID_DB_DB_GEARS,
     NIU_ID_DB_DB_SPEED,
     NIU_ID_DB_DB_MILEAGE,
     NIU_ID_DB_DB_C_CUR,
     NIU_ID_DB_DB_DC_CUR,
     NIU_ID_DB_DB_BAT_SOC,
     NIU_ID_DB_DB_FULL_C_T,
     NIU_ID_DB_DB_HOUR,
     NIU_ID_DB_DB_MIN,
     NIU_ID_DB_DB_F_CODE,
     NIU_ID_DB_DB_BAT2_SOC,
     NIU_ID_DB_DB_STATUS2,
     NIU_ID_DB_DB_TOTAL_SOC,
     NIU_ID_DB_DB_RGB_SET,
     NIU_ID_DB_DB_RGB_CONFIG,
     NIU_ID_DB_DB_SOFT_VER,
     NIU_ID_DB_DB_HARD_VER,
     NIU_ID_DB_DB_SN,
     NIU_ID_DB_MAX
}NIU_DATA_ID_DB;


typedef enum _niu_data_id_alarm_
{
     NIU_ID_ALARM_ALARM_SOFT_VER,
     NIU_ID_ALARM_ALARM_HARD_VER,
     NIU_ID_ALARM_ALARM_SN,
     NIU_ID_ALARM_ALARM_STATE,
     NIU_ID_ALARM_ALARM_CONTROL_CMD,
     NIU_ID_ALARM_MAX
}NIU_DATA_ID_ALARM;


typedef enum _niu_data_id_lockboard_
{
     NIU_ID_LOCKBOARD_LOCK_BOARD_HARD_VER,
     NIU_ID_LOCKBOARD_LOCK_BOARD_SOFT_VER,
     NIU_ID_LOCKBOARD_LOCK_BOARD_SN,
     NIU_ID_LOCKBOARD_LOCK_BOARD_CFG,
     NIU_ID_LOCKBOARD_LOCK_BOARD_STATUS,
     NIU_ID_LOCKBOARD_LOCK_BOARD_ALARM_STATE,
     NIU_ID_LOCKBOARD_LOCK_BOARD_LOCK1_STATE,
     NIU_ID_LOCKBOARD_LOCK_BOARD_LOCK2_STATE,
     NIU_ID_LOCKBOARD_LOCK_BOARD_LOCK3_STATE,
     NIU_ID_LOCKBOARD_LOCK_BOARD_HELMET_STATE,
     NIU_ID_LOCKBOARD_LOCK_BOARD_ALARM_CMD,
     NIU_ID_LOCKBOARD_LOCK_BOARD_LOCK1_CMD,
     NIU_ID_LOCKBOARD_LOCK_BOARD_LOCK2_CMD,
     NIU_ID_LOCKBOARD_LOCK_BOARD_LOCK3_CMD,
     NIU_ID_LOCKBOARD_LOCK_BOARD_BATTERYSTA,
     NIU_ID_LOCKBOARD_LOCK_BOARD_POWERSTA,
     NIU_ID_LOCKBOARD_LOCK_BOARD_LOCK1CUR,
     NIU_ID_LOCKBOARD_LOCK_BOARD_LOCK2CUR,
     NIU_ID_LOCKBOARD_LOCK_BOARD_LOCK3CUR,
     NIU_ID_LOCKBOARD_LOCK_BOARD_VLOCKSTA,
     NIU_ID_LOCKBOARD_LOCK_BOARD_VIN_STATUS,
     NIU_ID_LOCKBOARD_LOCK_BOARD_VLOCK_STATUS,
     NIU_ID_LOCKBOARD_LOCK_BOARD_VBAT_STATUS,
     NIU_ID_LOCKBOARD_LOCK_BOARD_VDD_STATUS,
     NIU_ID_LOCKBOARD_LOCK_BOARD_LOCK1_TIMEOUT,
     NIU_ID_LOCKBOARD_LOCK_BOARD_LOCK2_TIMEOUT,
     NIU_ID_LOCKBOARD_LOCK_BOARD_LOCK3_TIMEOUT,
     NIU_ID_LOCKBOARD_MAX
}NIU_DATA_ID_LOCKBOARD;


typedef enum _niu_data_id_bms2_
{
     NIU_ID_BMS2_BMS2_USER,
     NIU_ID_BMS2_BMS2_ID,
     NIU_ID_BMS2_BMS2_S_VER,
     NIU_ID_BMS2_BMS2_H_VER,
     NIU_ID_BMS2_BMS2_P_PWRD,
     NIU_ID_BMS2_BMS2_BAT_TYPE,
     NIU_ID_BMS2_BMS2_SN_ID,
     NIU_ID_BMS2_BMS2_OC_VLT_P,
     NIU_ID_BMS2_BMS2_ROC_VLT,
     NIU_ID_BMS2_BMS2_DC_VLT_P,
     NIU_ID_BMS2_BMS2_RDC_VLT_P,
     NIU_ID_BMS2_BMS2_C_B_VLT,
     NIU_ID_BMS2_BMS2_C_CUR_P,
     NIU_ID_BMS2_BMS2_DC_CUR_P,
     NIU_ID_BMS2_BMS2_ISC_P,
     NIU_ID_BMS2_BMS2_DCOTP_P,
     NIU_ID_BMS2_BMS2_RDCOTP_P,
     NIU_ID_BMS2_BMS2_COTP_P,
     NIU_ID_BMS2_BMS2_RCOTP_P,
     NIU_ID_BMS2_BMS2_DCLTP_P,
     NIU_ID_BMS2_BMS2_RDCLTP_P,
     NIU_ID_BMS2_BMS2_NCOM_DC_EN,
     NIU_ID_BMS2_BMS2_RATED_VLT,
     NIU_ID_BMS2_BMS2_BAT_TO_CAP,
     NIU_ID_BMS2_BMS2_C_CONT,
     NIU_ID_BMS2_BMS2_TO_VLT_RT,
     NIU_ID_BMS2_BMS2_C_CUR_RT,
     NIU_ID_BMS2_BMS2_DC_CUR_RT,
     NIU_ID_BMS2_BMS2_SOC_RT,
     NIU_ID_BMS2_BMS2_BAT_STA_RT,
     NIU_ID_BMS2_BMS2_DC_FL_T_RT,
     NIU_ID_BMS2_BMS2_TP1_RT,
     NIU_ID_BMS2_BMS2_TP2_RT,
     NIU_ID_BMS2_BMS2_TP3_RT,
     NIU_ID_BMS2_BMS2_TP4_RT,
     NIU_ID_BMS2_BMS2_TP5_RT,
     NIU_ID_BMS2_BMS2_G_VLT_RT1,
     NIU_ID_BMS2_BMS2_G_VLT_RT2,
     NIU_ID_BMS2_BMS2_G_VLT_RT3,
     NIU_ID_BMS2_BMS2_G_VLT_RT4,
     NIU_ID_BMS2_BMS2_G_VLT_RT5,
     NIU_ID_BMS2_BMS2_G_VLT_RT6,
     NIU_ID_BMS2_BMS2_G_VLT_RT7,
     NIU_ID_BMS2_BMS2_G_VLT_RT8,
     NIU_ID_BMS2_BMS2_G_VLT_RT9,
     NIU_ID_BMS2_BMS2_G_VLT_RT10,
     NIU_ID_BMS2_BMS2_G_VLT_RT11,
     NIU_ID_BMS2_BMS2_G_VLT_RT12,
     NIU_ID_BMS2_BMS2_G_VLT_RT13,
     NIU_ID_BMS2_BMS2_G_VLT_RT14,
     NIU_ID_BMS2_BMS2_G_VLT_RT15,
     NIU_ID_BMS2_BMS2_G_VLT_RT16,
     NIU_ID_BMS2_BMS2_G_VLT_RT17,
     NIU_ID_BMS2_BMS2_G_VLT_RT18,
     NIU_ID_BMS2_BMS2_G_VLT_RT19,
     NIU_ID_BMS2_BMS2_G_VLT_RT20,
     NIU_ID_BMS2_MAX
}NIU_DATA_ID_BMS2;


typedef enum _niu_data_id_bcs_
{
     NIU_ID_BCS_BCS_USER,
     NIU_ID_BCS_BCS_HARD_ID,
     NIU_ID_BCS_BCS_S_VER,
     NIU_ID_BCS_BCS_H_VER,
     NIU_ID_BCS_BCS_P_PWRD,
     NIU_ID_BCS_BCS_SN_ID,
     NIU_ID_BCS_BCS_CHARGE_CUR_P,
     NIU_ID_BCS_BCS_DISCHARGE_CUR_P,
     NIU_ID_BCS_BCS_CUR_CUT_STATE,
     NIU_ID_BCS_BCS_CHARGE_VOL_P,
     NIU_ID_BCS_BCS_DISCHARGE_VOL_P,
     NIU_ID_BCS_BCS_CMP_VOL,
     NIU_ID_BCS_BCS_TIME_CHARGE_CUR_P,
     NIU_ID_BCS_BCS_TIME_DISCHARGE_CUR_P,
     NIU_ID_BCS_BCS_TEMP_HET_IN_P,
     NIU_ID_BCS_BCS_TEMP_COLD_IN_P,
     NIU_ID_BCS_BCS_TEMP_HET_OUT_P,
     NIU_ID_BCS_BCS_TEMP_COLD_OUT_P,
     NIU_ID_BCS_BCS_BAT_TO_CAP,
     NIU_ID_BCS_BCS_STATE,
     NIU_ID_BCS_BCS_CMD_SEL_BT,
     NIU_ID_BCS_BCS_BT1_MOS_TEMP,
     NIU_ID_BCS_BCS_BT2_MOS_TEMP,
     NIU_ID_BCS_BCS_BCS_MOS_TEMP,
     NIU_ID_BCS_BCS_CHARGE_CUR,
     NIU_ID_BCS_BCS_DISCHARGE_CUR,
     NIU_ID_BCS_BCS_SOC_RT,
     NIU_ID_BCS_BCS_DC_FL_T_RT,
     NIU_ID_BCS_BCS_TO_CHARGER_CUR,
     NIU_ID_BCS_BCS_TO_CHARGER_VOL,
     NIU_ID_BCS_BCS_BMS1_SOC,
     NIU_ID_BCS_BCS_BMS2_SOC,
     NIU_ID_BCS_BCS_BCS_OUTPUT_VLT,
     NIU_ID_BCS_BCS_BMS1_INPUT_VLT,
     NIU_ID_BCS_BCS_BMS2_INPUT_VLT,
     NIU_ID_BCS_MAX
}NIU_DATA_ID_BCS;


typedef enum _niu_data_id_foc_
{
     NIU_ID_FOC_RESERVED0,
     NIU_ID_FOC_FOC_ID,
     NIU_ID_FOC_FOC_MODE,
     NIU_ID_FOC_FOC_SN,
     NIU_ID_FOC_FOC_VERSION,
     NIU_ID_FOC_FOC_RATEDVLT,
     NIU_ID_FOC_FOC_MINVLT,
     NIU_ID_FOC_FOC_MAXVLT,
     NIU_ID_FOC_FOC_GEARS,
     NIU_ID_FOC_FOC_RATEDCUR,
     NIU_ID_FOC_FOC_BARCUR,
     NIU_ID_FOC_FOC_MOTORSPEED,
     NIU_ID_FOC_FOC_COTLSTA,
     NIU_ID_FOC_FOC_CTRLSTA2,
     NIU_ID_FOC_ACC_MODE_STAT,
     NIU_ID_FOC_RESERVED2,
     NIU_ID_FOC_FOC_BAT_SOFT_UV_EN,
     NIU_ID_FOC_FOC_BAT_SOFT_UV_VLT,
     NIU_ID_FOC_FOC_MAX_PHASE_CUR,
     NIU_ID_FOC_FOC_MIN_PHASE_CUR,
     NIU_ID_FOC_FOC_AVG_PHASE_CUR,
     NIU_ID_FOC_FOC_THROTTLE_MODE_SET,
     NIU_ID_FOC_FOC_FOC_ACCELE,
     NIU_ID_FOC_FOC_FOC_DCCELE,
     NIU_ID_FOC_FOC_EBS_EN,
     NIU_ID_FOC_FOC_EBS_RE_VLT,
     NIU_ID_FOC_FOC_EBS_RE_CUR,
     NIU_ID_FOC_FOC_HIGH_SPEED_RATIO,
     NIU_ID_FOC_FOC_MID_SPEED_RATIO,
     NIU_ID_FOC_FOC_LOW_SPEED_RATIO,
     NIU_ID_FOC_FOC_HIGH_GER_CUR_LIMT_RATIO,
     NIU_ID_FOC_FOC_MID_GER_CUR_LIMT_RATIO,
     NIU_ID_FOC_FOC_LOW_GER_CUR_LIMT_RATIO,
     NIU_ID_FOC_FOC_FLUX_WEAKEN_EN,
     NIU_ID_FOC_FOC_ENTER_FLUX_SPEED_RATIO,
     NIU_ID_FOC_FOC_EXIT_FLUX_SPEED_RATIO,
     NIU_ID_FOC_FOC_FLUX_W_MAX_CUR,
     NIU_ID_FOC_FOC_ENTER_FLUX_THROTTLE_VLT,
     NIU_ID_FOC_FOC_BOOST_EN,
     NIU_ID_FOC_FOC_BOOST_MODE,
     NIU_ID_FOC_FOC_BOOST_CUR,
     NIU_ID_FOC_FOC_BOOST_KEEP_TIME,
     NIU_ID_FOC_FOC_BOOST_INTERVAL_TIME,
     NIU_ID_FOC_FOC_START_AUTO_EN,
     NIU_ID_FOC_FOC_START_GEAR,
     NIU_ID_FOC_FOC_START_KEEP_TIME,
     NIU_ID_FOC_MAX
}NIU_DATA_ID_FOC;


typedef enum _niu_data_id_qc_
{
     NIU_ID_QC_QC_LED_STATE,
     NIU_ID_QC_QC_FAULT1,
     NIU_ID_QC_QC_FAULT2,
     NIU_ID_QC_QC_VOLTAGE1_ADC,
     NIU_ID_QC_QC_VOLTAGE1_100MV,
     NIU_ID_QC_QC_VOLTAGE2_ADC,
     NIU_ID_QC_QC_VOLTAGE2_100MV,
     NIU_ID_QC_QC_CURRENT_ADC,
     NIU_ID_QC_QC_CURRENT_100MA,
     NIU_ID_QC_QC_REFERENCE_ADC,
     NIU_ID_QC_QC_TEMPERATURE_ADC,
     NIU_ID_QC_QC_TEMPERATURE_01DEGREE,
     NIU_ID_QC_QC_PFC_IN,
     NIU_ID_QC_QC_WORK_MODE,
     NIU_ID_QC_QC_WORK_STRATEGY,
     NIU_ID_QC_QC_WORK_PHASES,
     NIU_ID_QC_QC_EN_OUT,
     NIU_ID_QC_QC_MOS_OUT,
     NIU_ID_QC_QC_GOALVOLTAGE_100MV,
     NIU_ID_QC_QC_VOLTAGEPWM_0001PERCENT,
     NIU_ID_QC_QC_GOALCURRENT_100MA,
     NIU_ID_QC_QC_CURRENTPWM_0001PERCENT,
     NIU_ID_QC_QC_CHARGE_VOLTAGE_P_100MV,
     NIU_ID_QC_QC_CHARGE_CURRENT_P_100MA,
     NIU_ID_QC_RESERVED0,
     NIU_ID_QC_RESERVED1,
     NIU_ID_QC_RESERVED2,
     NIU_ID_QC_RESERVED3,
     NIU_ID_QC_RESERVED4,
     NIU_ID_QC_RESERVED5,
     NIU_ID_QC_RESERVED6,
     NIU_ID_QC_RESERVED7,
     NIU_ID_QC_RESERVED8,
     NIU_ID_QC_RESERVED9,
     NIU_ID_QC_RESERVED10,
     NIU_ID_QC_RESERVED11,
     NIU_ID_QC_RESERVED12,
     NIU_ID_QC_RESERVED13,
     NIU_ID_QC_RESERVED14,
     NIU_ID_QC_RESERVED15,
     NIU_ID_QC_RESERVED16,
     NIU_ID_QC_RESERVED17,
     NIU_ID_QC_RESERVED18,
     NIU_ID_QC_QC_SOFTWARE_VERSION,
     NIU_ID_QC_QC_HARDWARE_VERSION,
     NIU_ID_QC_QC_FREQUENCYGRADE_10,
     NIU_ID_QC_QC_TEMPERATURE_P_01DEGREE,
     NIU_ID_QC_QC_TEMPERATURE_R_01DEGREE,
     NIU_ID_QC_QC_OUTVOLTAGE_ADJ,
     NIU_ID_QC_QC_OUTCURRENT_ADJ,
     NIU_ID_QC_QC_INVOLTAGE_ADJ,
     NIU_ID_QC_QC_INCURRENT_ADJ,
     NIU_ID_QC_QC_VOLTAGEPWM_P_001PERCENT,
     NIU_ID_QC_QC_VOLTAGEPWM_I_001PERCENT,
     NIU_ID_QC_QC_VOLTAGEPWM_D_001PERCENT,
     NIU_ID_QC_QC_VOLTAGE_P_100MV,
     NIU_ID_QC_QC_CURRENTPWM_P_001PERCENT,
     NIU_ID_QC_QC_CURRENTPWM_I_001PERCENT,
     NIU_ID_QC_QC_CURRENTPWM_D_001PERCENT,
     NIU_ID_QC_QC_CURRENT_P_100MA,
     NIU_ID_QC_RESERVED19,
     NIU_ID_QC_RESERVED20,
     NIU_ID_QC_RESERVED21,
     NIU_ID_QC_RESERVED22,
     NIU_ID_QC_RESERVED23,
     NIU_ID_QC_RESERVED24,
     NIU_ID_QC_RESERVED25,
     NIU_ID_QC_RESERVED26,
     NIU_ID_QC_RESERVED27,
     NIU_ID_QC_RESERVED28,
     NIU_ID_QC_RESERVED29,
     NIU_ID_QC_RESERVED30,
     NIU_ID_QC_RESERVED31,
     NIU_ID_QC_RESERVED32,
     NIU_ID_QC_RESERVED33,
     NIU_ID_QC_QC_CHARGE_SN_CODE,
     NIU_ID_QC_MAX
}NIU_DATA_ID_QC;

typedef enum _niu_data_id_cpm_
{
     NIU_ID_CPM_DEV_NAME,
     NIU_ID_CPM_DEV_SW_VERNO,
     NIU_ID_CPM_DEV_HW_VERNO,
     NIU_ID_CPM_DEV_SPACE,
     NIU_ID_CPM_DEV_FREE_SPACE,
     NIU_ID_CPM_DEV_MODEL,
     NIU_ID_CPM_DEV_SN,
     NIU_ID_CPM_DEV_MAC,
     NIU_ID_CPM_SETTINGS_BLE_STATE,
     NIU_ID_CPM_SETTINGS_GPS_STATE,
     NIU_ID_CPM_SETTINGS_BIKE_MODE,
     NIU_ID_CPM_SETTINGS_BIKE_STATE,
     NIU_ID_CPM_SETTINGS_BRIGHTNESS,
     NIU_ID_CPM_SETTINGS_BACKLIGHT,
     NIU_ID_CPM_SETTINGS_COLORMODE,
     NIU_ID_CPM_SETTINGS_ALERT_VOLUME,
     NIU_ID_CPM_SETTINGS_KEY_VOLUME,
     NIU_ID_CPM_SETTINGS_DATA_CONFIG,
     NIU_ID_CPM_SETTINGS_AUTO_POWEROFF,
     NIU_ID_CPM_SETTINGS_TIME_FORMAT,
     NIU_ID_CPM_SETTINGS_LANGUAGE,
     NIU_ID_CPM_SETTINGS_MILEAGE_UNIT,
     NIU_ID_CPM_SETTINGS_TEMPERATURE_UNIT,
     NIU_ID_CPM_SETTINGS_WEIGHT_UNIT,
     NIU_ID_CPM_SETTINGS_BOUND_BSC_ID,
     NIU_ID_CPM_SETTINGS_BOUND_BS_ID,
     NIU_ID_CPM_SETTINGS_BOUND_BC_ID,
     NIU_ID_CPM_SETTINGS_BOUND_HRM_ID,
     NIU_ID_CPM_SETTINGS_BOUND_BPWR_ID,
     NIU_ID_CPM_USER_NAME,
     NIU_ID_CPM_USER_SEX,
     NIU_ID_CPM_USER_HEIGHT,
     NIU_ID_CPM_USER_WEIGHT,
     NIU_ID_CPM_USER_BIRTHDAY,
     NIU_ID_CPM_USER_CUR_ID,
     NIU_ID_CPM_USER_COUNT,
     NIU_ID_CPM_BIKE_CUR_ID,
     NIU_ID_CPM_BIKE_COUNT,
     NIU_ID_CPM_BIKE_NAME,
     NIU_ID_CPM_BIKE_SIZE,
     NIU_ID_CPM_BIKE_SUIT,
     NIU_ID_CPM_BIKE_DISPLAY,
     NIU_ID_CPM_BIKE_FRAME_SIZE,
     NIU_ID_CPM_BIKE_WHEELSIZE,
     NIU_ID_CPM_BIKE_HANDLELENGTH,
     NIU_ID_CPM_BIKE_WEIGHT,
     NIU_ID_CPM_BIKE_MILEAGE,
     NIU_ID_CPM_TOTAL_CYC_COUNT,
     NIU_ID_CPM_DEL_CYC_COUNT,
     NIU_ID_CPM_CYCLING_START_TIME,
     NIU_ID_CPM_CYCLING_STOP_TIME,
     NIU_ID_CPM_CYCLING_LATITUDE,
     NIU_ID_CPM_CYCLING_LONGITUDE,
     NIU_ID_CPM_CYCLING_MILEAGE,
     NIU_ID_CPM_CYCLING_DURATION,
     NIU_ID_CPM_CYCLING_V_MAX,
     NIU_ID_CPM_CYCLING_V_AVE,
     NIU_ID_CPM_CYCLING_V,
     NIU_ID_CPM_CYCLING_RPM_MAX,
     NIU_ID_CPM_CYCLING_RPM_AVE,
     NIU_ID_CPM_CYCLING_RPM,
     NIU_ID_CPM_CYCLING_HRM_MAX,
     NIU_ID_CPM_CYCLING_HRM_AVE,
     NIU_ID_CPM_CYCLING_HRM,
     NIU_ID_CPM_CYCLING_BPWR_MAX,
     NIU_ID_CPM_CYCLING_BPWR_AVE,
     NIU_ID_CPM_CYCLING_BPWR,
     NIU_ID_CPM_CYCLING_ELEVATION,
     NIU_ID_CPM_CYCLING_RISING_DISTANCE,
     NIU_ID_CPM_CYCLING_DECLINE_DISTANCE,
     NIU_ID_CPM_CYCLING_MAX_LEFT_ANGLE,
     NIU_ID_CPM_CYCLING_MAX_RIGHT_ANGLE,
     NIU_ID_CPM_CYCLING_KCAL,
     NIU_ID_CPM_CYCLING_TEMPERATURE,
     NIU_ID_CPM_CYCLING_ALS,
     NIU_ID_CPM_CYCLING_PRESSURE,
     NIU_ID_CPM_CYCLING_SUB_INDEX,
     NIU_ID_CPM_CYCLING_SUB_START_TIME,
     NIU_ID_CPM_CYCLING_SUB_END_TIME,
     NIU_ID_CPM_CYCLING_SUB_MILEAGE,
     NIU_ID_CPM_CYCLING_SUB_V_AVE,
     NIU_ID_CPM_RECORD_START_TIME,
     NIU_ID_CPM_RECORD_MAX_MILEAGE,
     NIU_ID_CPM_RECORD_MAX_DURATION,
     NIU_ID_CPM_RECORD_FASTEST_10KM_DURATION,
     NIU_ID_CPM_RECORD_MAX_V,
     NIU_ID_CPM_RECORD_MAX_RPM,
     NIU_ID_CPM_RECORD_MAX_HRM,
     NIU_ID_CPM_RECORD_MAX_BPWR,
     NIU_ID_CPM_RECORD_MAX_ANGLE,
     NIU_ID_CPM_RECORD_MAX_RISING_DISTANCE,
     NIU_ID_CPM_RECORD_MAX_DECLINE_DISTANCE,
     NIU_ID_CPM_RECORD_MAX_KCAL,
     NIU_ID_CPM_CUMULATIVE_START_TIME,
     NIU_ID_CPM_CUMULATIVE_TOTAL_CYCLING_COUNTS,
     NIU_ID_CPM_CUMULATIVE_TOTAL_MILEAGE,
     NIU_ID_CPM_CUMULATIVE_TOTAL_DURATION,
     NIU_ID_CPM_CUMULATIVE_TOTAL_RISING_DISTANCE,
     NIU_ID_CPM_CUMULATIVE_TOTAL_DECLINE_DISTANCE,
     NIU_ID_CPM_CUMULATIVE_TOTAL_KCAL,
     NIU_ID_CPM_TIMESTAMP,
     NIU_ID_CPM_B9WATCH_SERVER_CMD,
     NIU_ID_CPM_ANT_DEV_CONN_STATE,
     NIU_ID_CPM_NORDIC_VERNO,
     NIU_ID_CPM_CYCLING_STATE,
     NIU_ID_CPM_ADD_USER,
     NIU_ID_CPM_DELETE_USER,
     NIU_ID_CPM_ADD_BIKE,
     NIU_ID_CPM_DELETE_BIKE,
     NIU_ID_CPM_BOUND_APP_STATE,
     NIU_ID_CPM_CONN_BLE_NAME,
     NIU_ID_CPM_GPRS_DATA_STATE,
     NIU_ID_CPM_CYC_HISTORY_AUTO_UPLOAD,
     NIU_ID_CPM_CYC_HISTORY_AUTO_DELETE,
     NIU_ID_CPM_GET_BIKE_LIST,
     NIU_ID_CPM_CYCLING_ANGLE,
     NIU_ID_CPM_CYCLING_SLOPE,
     NIU_ID_CPM_APP_READ_CYC_COUNTS,
     NIU_ID_CPM_CURRENT_CYCLING_INDEX,
     NIU_ID_CPM_MAX
}NIU_DATA_ID_CPM;

typedef struct _niu_address_
{
    NUINT8 base;  //设备首地址
    NUINT16 id ;     //地址域
}NIU_ADDRESS;

typedef struct _niu_server_upl_cmd_
{
	NUINT8	index;	//序列编号
	NUINT32 trigger0;	//ECU状态触发条件|
	NUINT32 trigger1;	//BMS状态触发掩码
	NUINT32 trigger2;	//FOC状态触发掩码
	NUINT32 trigger3;	//ECU状态触发掩码&
	NUINT32 trigger4;	//ALARM状态触发掩码
	NUINT32 trigger5;	//LCU状态触发掩码
	NUINT32 trigger6;	//DB状态触发掩码
	NUINT32 trigger7;	//保留位掩码位
	NUINT32 trigger8;	//保留位掩码位
	NUINT32 trigger9;	//保留位掩码位
	NUINT16 packed_name;	//包组合编号
    NUINT16 trigged_count;     //触发最大次数
	NUINT16 send_max;	//使用次数
	NUINT16 interval;	//发送间隔
	NUINT16 cur_time;	//当前时间
	NUINT16 addr_num;	//地址序列长度
	NIU_ADDRESS addr_array[100];	//地址序列
}NIU_SERVER_UPL_TEMPLATE;

#define NIU_SERVER_UPL_CMD_NUM (50)
#define TEMPLATE_INTERVAL (5)
void empyt_template_low_power(int tmr_id, void *param);

void clear_niu_upl_cmd();

void clear_upl_cmd_info(int index, int triggerflag);

int get_overlayable_template_index(int received_template_index);

void upload_template_data(int index);

void check_template_low_power();

/**
 * This function used to initialized ecu_state when app start up.
 * the ecu_state is based on ecu_car_sta, for example:
 * ecu_car_sta value bit NIU_STATE_ACC is true, we can set ecu_state
 * NIU_TRIGGER_EVENT_ACC_ON is ture, and NIU_TRIGGER_EVENT_ACC_OFF is
 * off.
 *  
 */ 
void niu_data_ecu_state_init();

/**
 * This function used to check whether the template is tiggered.
 * first, update ecu_state value, and then read templates to check whether it is tiggered.
 * the Results of inspection is updated to g_niu_upl_cmd_info
 */
JVOID niu_update_trigger_template();


/**
 * setting car state by state defines and value
 * when value is true, set state true, else if value is false,
 * set state false.
 *  
 * params
 *  @state: car state defines, see enum NIU_CAR_STATE
 *  @value: the state value, True or False
 * 
 * return value
 *  void
 *  
 */ 
JVOID niu_car_state_set(NIU_CAR_STATE state, JBOOL value);


/**
 * get car state value by state define
 * 
 * params
 *  @state: car state defines, see enum NIU_CAR_STATE
 * 
 * return value
 *  if state is True, return True, else return False.
 */ 
JBOOL niu_car_state_get(NIU_CAR_STATE state);


/**
 * set car acc off time, used to not reporting shake detection template within two 
 * minutes of acc off.
 * 
 * params
 *  null
 * 
 * return value
 *  null.
 */
//baron.qian-2019/06/20: Requirements change, and this function is implemented on the MCU side
//void niu_acc_off_time_update();
#ifdef __cplusplus 
}
#endif
#endif /* !NIU_DATA_H_ */
